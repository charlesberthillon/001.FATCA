GLa <- subset(dt, CategoryCode == "GL")
shiny::runApp()
shiny::runApp()
View(GLa)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
data <- dt.agg.country()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
View(dt)
dt <- fread('cdata/notcleandata.csv')
dt <- fread('cdata/notcleandata.csv')
View(dt)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
dt <- fread('cdata/notcleandata.csv')
dt$EVTYPE <- tolower(dt$EVTYPE)
evtypes <<- sort(unique(dt$EVTYPE))
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
tabPanel("About",
mainPanel(
includeMarkdown("cdata/About.md")
)
)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
dt$EVTYPE <- tolower(dt$EVTYPE)
evtypes <- sort(unique(dt$EVTYPE))
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
dt <- fread('cdata/cleandata.csv')
View(dt)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
View(BR7)
BR7<-t(BR6)
View(BR7)
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
setwd("C:/Users/cberthillon/018.Coursera/004.Exploratory Data Analysis/040.CourseProject2")
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
View(SCC)
View(NEI)
dt3<-merge(GL6, SL6$SLFreq, LE$LEFreq, by='Country')
library("data.table")
library("stringr")
library("plyr")
library("qcc")
library("ggplot2")
library("devtools")
library("rCharts")
setwd<-'C:/Users/cberthillon/018.Coursera/005.DevelopingDataProducts/004.Project/project1/FATCA/data'
dt1 <- fread('C:/Users/cberthillon/018.Coursera/005.DevelopingDataProducts/004.Project/project1/FATCA/data/mydata.csv')
######################################################################################################
# Step 1. create subsets of data by Financial institution or Branch category
# Step 1.1: subset of per country
GL1 <- count(dt1$CountryNm)
GL2<-data.frame(GL1)
GL3<- rep("GL",nrow(GL2)) # make new column
GL4<- rep("07",nrow(GL2)) # make new column
GL5<-cbind(GL4,GL3,GL2)
colnames(GL5) <- c("ExtractDate","CategoryCode","Country", "GLFreq")
GL6<-GL5[with(GL5,order(GLFreq,decreasing=TRUE)),]
# Step 1.1: subset of Single
SL0   <- subset(dt1, GIIN3 == "SL")
SL1<-count(SL0$CountryNm)
SL2<-data.frame(SL1)
SL3<- rep("SL",nrow(SL2)) # make new column
SL4<- rep("07",nrow(SL2)) # make new column
SL5<-cbind(SL4,SL3,SL2)
colnames(SL5) <- c("ExtractDate","CategoryCode","Country", "SLFreq")
SL6<-SL5[with(SL5,order(SLFreq,decreasing=TRUE)),]
#SL6<-SL5[,c(4,3,1,2)] # order columns by indexing
# Step 1.2: subset of Lead
LE0   <- subset(dt1, GIIN3 == "LE")
LE1<-count(LE0$CountryNm)
LE2<-data.frame(LE1)
LE3<- rep("LE",nrow(LE2)) # make new column
LE4<- rep("07",nrow(LE2)) # make new column
LE5<-cbind(LE4,LE3,LE2)
colnames(LE5) <- c("ExtractDate","CategoryCode","Country", "LEFreq")
LE6<-LE5[with(LE5,order(LEFreq,decreasing=TRUE)),]
# Step 1.3: subset of Member
ME0   <- subset(dt1, GIIN3 == "ME")
ME1<-count(ME0$CountryNm)
ME2<-data.frame(ME1)
ME3<- rep("ME",nrow(ME2)) # make new column
ME4<- rep("07",nrow(ME2)) # make new column
ME5<-cbind(ME4,ME3,ME2)
colnames(ME5) <- c("ExtractDate","CategoryCode","Country", "MEFreq")
ME6<-ME5[with(ME5,order(MEFreq,decreasing=TRUE)),]
# Step 1.3: subset of Member
BR0   <- subset(dt1, GIIN3 == "BR")
BR1<-count(BR0$CountryNm)
BR2<-data.frame(BR1)
BR3<- rep("BR",nrow(BR2)) # make new column
BR4<- rep("07",nrow(BR2)) # make new column
BR5<-cbind(BR4,BR3,BR2)
colnames(BR5) <- c("ExtractDate","CategoryCode","Country", "BRFreq")
BR6<-BR5[with(BR5,order(BRFreq,decreasing=TRUE)),]
dt3<-merge(GL6, SL6$SLFreq, LE$LEFreq, by='Country')
dt3<-merge(GL6, SL6$SLFreq, LE6$LEFreq, by='Country')
dt3<-merge(GL6, SL6, by='Country')
View(dt3)
dt3<-merge(GL6, SL6,LE6, by='Country')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
View(dt0)
dt0<-fread('cdata/mydata.csv')
View(dt0)
dt0<-fread('cdata/cleandata.csv')
View(dt0)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
View(dataset)
immat <- read.table("http://yohann.feneche.free.fr/immatriculations.txt",
header = T)
immat$Rdate <- seq(as.Date("2000-01-01"), by = "month", along = immat$sales)
immat$annee = year(immat$Rdate)
immat$mois = month(immat$Rdate)
immat2 <- as.data.table(immat)
View(immat2)
shiny::runApp()
shiny::runApp()
shiny::runApp()
dt0 <- fread('cdata/cleandata.csv')
View(dt0)
View(dt0)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
require(mapproj)
install.packages("mapproj")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shinyServer(function(input, output) {
dt.agg <- reactive({
tmp <- merge(
data.table(Country=sort(unique(dt$Country))),
dt[
dt$Frequence >= input$range[1] & dt$Frequence <= input$range[2] & CategoryCode %in% input$dt1,
list(
COUNT=sum(Frequence)),
by=list(Country)],
by=c('Country'), all=TRUE
)
tmp[is.na(tmp)] <- 0
tmp
})
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
dt1 <<- sort(unique(dt$CategoryCode))
View(dt1)
shiny::runApp()
shiny::runApp()
y <- matrix(sample(1:10, 40, replace=TRUE), ncol=4, dimnames=list(letters[1:10], LETTERS[1:4])) # Creates a sample data set.
barchart(y, auto.key=list(adj = 1), freq=T, xlab="Counts", horizontal=TRUE, stack=FALSE, groups=TRUE) # Plots all data in a single bar plot. The TRUE/FALSE arguments control the layout of the plot.
barchart(y, col="grey", layout = c(2, 2, 1), xlab="Counts", as.table=TRUE, horizontal=TRUE, stack=FALSE, groups=FALSE)
# Plots the different data components in separate bar plots. The TRUE/FALSE and layout arguments allow to rearrange the bar plots in different ways.
library(lattice)
y <- matrix(sample(1:10, 40, replace=TRUE), ncol=4, dimnames=list(letters[1:10], LETTERS[1:4])) # Creates a sample data set.
barchart(y, auto.key=list(adj = 1), freq=T, xlab="Counts", horizontal=TRUE, stack=FALSE, groups=TRUE) # Plots all data in a single bar plot. The TRUE/FALSE arguments control the layout of the plot.
barchart(y, col="grey", layout = c(2, 2, 1), xlab="Counts", as.table=TRUE, horizontal=TRUE, stack=FALSE, groups=FALSE)
View(y)
View(dt)
w<-barchart(y, auto.key=list(adj = 1), freq=T, xlab="Counts", horizontal=TRUE, stack=FALSE, groups=TRUE) # Plots all data in a single bar plot. The TRUE/FALSE arguments control the layout of the plot.
View(w)
View(w)
library(lattice)
y <- matrix(sample(1:10, 40, replace=TRUE), ncol=4, dimnames=list(letters[1:10], LETTERS[1:4])) # Creates a sample data set.
barchart(y,
auto.key=list(adj = 1),
freq=T,
xlab="Counts",
horizontal=TRUE,
stack=FALSE,
groups=TRUE) # Plots all data in a single bar plot. The TRUE/FALSE arguments control the layout of the p
dt <- fread('cdata/cleandata.csv')
barchart(dt,
auto.key=list(adj = 2),
freq=T,
xlab="Counts",
horizontal=TRUE,
stack=FALSE,
groups=TRUE) # Plots all data in a single bar plot. The TRUE/FALSE arguments control the layout of the plot.
dt <- fread('cdata/cleandata.csv')
ggplot(dt) +
geom_bar(aes(x=Country, fill=CategoryCode)) +
coord_flip()  +
theme(axis.text.y=element_text(size=rel(0.8)))
dt <- fread('cdata/cleandata.csv')
ggplot(dt) +
geom_bar(aes(x=Country, fill=CategoryCode)) +
coord_flip()  +
theme(axis.text.y=element_text(size=rel(1)))
dt <- fread('cdata/cleandata.csv')
ggplot(dt) +
geom_bar(aes(x=Country, fill=CategoryCode)) +
coord_flip()  +
theme(axis.text.y=element_text(size=rel(0.5)))
dt <- fread('cdata/cleandata.csv')
ggplot(dt) +
geom_bar(aes(x=Country, fill=Frequence~CategoryCode)) +
coord_flip()  +
theme(axis.text.y=element_text(size=rel(0.5)))
require(ggplot2)
dt3 <- subset(dt, Frequence>=1000)
ggplot(dt3, aes(reorder(Country, Frequence), Frequence)) +
geom_bar() +
opts(axis.text.x=theme_text(angle=0)) +
opts(axis.text.y=theme_text(angle=0)) +
coord_flip() +
ylab("Worldwise Gross (USD $ millions)") +
xlab("Title") +
opts(title = "TOP 50 FILMS BY WORLDWIDE GROSS")
require(ggplot2)
dt3 <- subset(dt, Frequence>=1000)
ggplot(dt3, aes(reorder(Country, Frequence), Frequence)) +
geom_bar() +
theme(axis.text.y=element_text(size=rel(0.5))) +
coord_flip() +
ylab("Worldwise Gross (USD $ millions)") +
xlab("Title") +
opts(title = "TOP 50 FILMS BY WORLDWIDE GROSS")
require(ggplot2)
dt3 <- subset(dt, Frequence>=1000)
ggplot(dt3, aes(reorder(Country, Frequence), Frequence)) +
geom_bar() +
theme(axis.text.y=element_text(size=rel(0.5))) +
coord_flip()
require(ggplot2)
dt3 <- subset(dt, Frequence>=1000)
dt4 <- dt3[order(dt3$Frequence), ] #order
ggplot(dt4, aes(x = Country, y = Frequence, label = Freq)) +
geom_bar(stat = "identity",position = "dodge") +
geom_text(hjust = -0.2, size = 3) +
coord_flip() +
theme_minimal()
require(ggplot2)
dt3 <- subset(dt, Frequence>=1000)
dt4 <- dt3[order(dt3$Frequence), ] #order
ggplot(dt4, aes(x = Country, y = Frequence, label = Frequence)) +
geom_bar(stat = "identity",position = "dodge") +
geom_text(hjust = -0.2, size = 3) +
coord_flip() +
theme_minimal()
View(dt4)
shiny::runApp()
shiny::runApp()
ggplot(dt4, aes(x = Country, y = Frequence,fill=CategoryCode, label = Frequence)) +
dt <- fread('cdata/cleandata.csv')
require(ggplot2)
dt3 <- subset(dt, Frequence>=1000)
dt4 <- dt3[order(dt3$Frequence), ]#order
View(dt4)
ggplot(dt4, aes(x = Country, y = Frequence,fill=CategoryCode, label = Frequence)) +
geom_bar(stat = "identity",position = "dodge") +
geom_text(hjust = -0.2, size = 3) +
coord_flip() +
theme_minimal()
dt <- fread('cdata/cleandata.csv')
require(ggplot2)
dt3 <- subset(dt, Frequence>=1000)
dt4 <- dt3[order(dt3$Frequence), ]#order
ggplot(dt4, aes(x = Country, y = Frequence,fill=CategoryCode, label = Frequence)) +
geom_bar(stat = "identity",position = "dodge") +
geom_text(hjust = -0.2, size = 3) +
coord_flip() +
theme_minimal()
dt4 <- dt3[order(dt3$Frequence[GL]), ]#order
shiny::runApp()
shiny::runApp()
shiny::runApp()
dt <- fread('cdata/cleandata.csv')
require(ggplot2)
dt3 <- subset(dt, Frequence>=1000)
dt4 <- dt3[order(dt3$Frequence), ]#order
plot(dt4, aes(x = Country, y = Frequence,fill=CategoryCode, label = Frequence)) +
geom_bar(stat = "identity",position = "dodge") +
geom_text(hjust = -0.2, size = 3) +
coord_flip() +
theme_minimal()
dt <- fread('cdata/cleandata.csv')
require(ggplot2)
dt3 <- subset(dt, Frequence>=1000)
dt4 <- dt3[order(dt3$Frequence), ]#order
nplot(dt4, aes(x = Country, y = Frequence,fill=CategoryCode, label = Frequence)) +
geom_bar(stat = "identity",position = "dodge") +
geom_text(hjust = -0.2, size = 3) +
coord_flip() +
theme_minimal()
dt <- fread('cdata/cleandata.csv')
require(ggplot2)
dt3 <- subset(dt, Frequence>=1000)
dt4 <- dt3[order(dt3$Frequence), ]#order
ggplot2(dt4, aes(x = Country, y = Frequence,fill=CategoryCode, label = Frequence)) +
geom_bar(stat = "identity",position = "dodge") +
geom_text(hjust = -0.2, size = 3) +
coord_flip() +
theme_minimal()
ggplot(dt4, aes(x = Country, y = Frequence,fill=CategoryCode, label = Frequence)) +
dt <- fread('cdata/cleandata.csv')
require(ggplot2)
dt3 <- subset(dt, Frequence>=1000)
dt4 <- dt3[order(dt3$Frequence), ]#order
ggplot(dt4, aes(x = Country, y = Frequence,fill=CategoryCode, label = Frequence)) +
geom_bar(stat = "identity",position = "dodge") +
geom_text(hjust = -0.2, size = 3) +
coord_flip() +
theme_minimal()
output$chart1 <- renderPlot({
dt3 <- subset(dt, Frequence>=1000)
dt4 <- dt3[order(dt3$Frequence), ]#order
p1<-plot(dt4, aes(x = Country, y = Frequence,fill=CategoryCode, label = Frequence)) +
geom_bar(stat = "identity",position = "dodge") +
geom_text(hjust = -0.2, size = 3) +
coord_flip() +
theme_minimal()
print(p1)
})
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
dt <- fread('cdata/cleandata.csv')
require(ggplot2)
dt3 <- subset(dt, Frequence>=1000)
dt4 <- dt3[order(dt3$Frequence=GL), ]#order
ggplot(dt4, aes(x = Country, y = Frequence,fill=CategoryCode, label = Frequence)) +
geom_bar(stat = "identity",position = "dodge") +
geom_text(hjust = -0.2, size = 3) +
coord_flip() +
theme_minimal()
dt <- fread('cdata/cleandata.csv')
require(ggplot2)
dt3 <- subset(dt, Frequence>=1000)
dt4 <- dt3[order(dt3$Frequence=='GL'), ]#order
ggplot(dt4, aes(x = Country, y = Frequence,fill=CategoryCode, label = Frequence)) +
geom_bar(stat = "identity",position = "dodge") +
geom_text(hjust = -0.2, size = 3) +
coord_flip() +
theme_minimal()
shiny::runApp()
#Welcome my app
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(devtools)
devtools::install_github('rstudio/shinyapps')
library(shinyapps)
shinyapps::setAccountInfo(name='charlesberthillon', token='4ECFF67F38A7890A4522EB0E0CADB291', secret='YydwqSA/rP+LvA7/Z3bNZOwRyb+vt0q9H0zMI+eL')
deployApp()
library(rchart)
library(rChart)
shiny::runApp()
shiny::runApp()
install.packages('devtools')
devtools::install_github('rstudio/shinyapps')
library(shinyapps)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
*....well not much for the moment, I am still working on it*
...well not much for the moment, I am still working on it
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library("knitr", lib.loc="~/R/win-library/3.1")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
output: html_document
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library("rjson")
install.packages("rjson")
library("rjson")
shiny::runApp()
devtools:install_github("rmarkdown", "rstudio")
devtools:install_github("rmarkdown", "rstudio")
library(devtools)
devtools:install_github("rmarkdown", "rstudio")
library(rmarkdown)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
configureApp("your-app-name", size="large")
configureApp("FATCA", size="large")
shiny::runApp()
shiny::runApp()
subtitle    : first deck
Charles
framework   : html5slides        # {io2012, html5slides, shower, dzslides, ...}
framework   : io2012        # {io2012, html5slides, shower, dzslides, ...}
job         : Charles & Friends

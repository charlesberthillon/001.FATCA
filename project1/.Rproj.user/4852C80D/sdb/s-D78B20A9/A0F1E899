{
    "contents" : "setwd(\"C:/Users/cberthillon/997.FATCA/project1\")\n\n#read function\nf1 <- function(id, directory, summarize = FALSE) {\n        f2 <- paste(getwd(),\"/\",\"001.data\",\"/\",sprintf(\"%08d\", as.numeric(id)), \".csv\", sep = \"\") #file sting function\n        f3 <- read.csv(f2)\n        if (summarize) {\n                print(summary(f3))\n        }\n        return(f3)\n}\ndata <- f1(20140701,'001.data', TRUE)\n\n# =============================================================\n#FATCA Compile files\nrequire(manipulate)\nrequire(plyr)\nsetwd(\"C:/Users/cberthillon/997.FATCA/project1\")\nf4<-'C:/Users/cberthillon/997.FATCA/project1/001.data'\n\nf5 <- list.files(path = f4, pattern = NULL, all.files = FALSE, full.names = TRUE, recursive = FALSE, ignore.case = FALSE)\n# Source: http://stackoverflow.com/questions/5186570/when-importing-csv-into-r-how-to-generate-column-with-name-of-the-csv\n# list.files() function reads into R the names of every file in that directory\n# f5= filenames\n# f6=read_csv_filename\n\nf6 <- function(f5){  #read_csv_file\n        f7 <- read.csv(f5)\n        f7$Source <- f5 #EDIT\n        f7\n}\n\nf8 <-ldply(f5,f6) # import and concatenate the source.list\n\n\n#================================================================\n\n#Organize and clean data\nrequire(stringr)\nf9<-data.frame(f8)\n\n#Column \"Source\": subset the file name and format it in date\nf10<-str_sub(f9$Source, -12, -9)\nf11<-str_sub(f9$Source, -8, -7)\nf12<-str_sub(f9$Source, -6, -5)\nf13<-cbind(f10,\"-\",f11,\"-\",f12)\nf13<-paste (f10,f11,f12, sep = \"-\", collapse = NULL)\nf14<-as.Date(f13)\nf15<-cbind(f14,f9)\ncolnames(f15)[1] <- \"Extractdate\"\nf15$Source<-NULL #delete column with source URL\n### TO BE ANALYZED: f15$Extracdate <- strptime(f15$Extracdate, \"%d/%m/%Y\")# foramting date and time\n\n#===========================================\n# Step 1. create subsets of data by Financial institution or Branch category \n# Step 1.1: create a pivot table\n# source: http://www.r-bloggers.com/pivot-tables-in-r/\n\nrequire(reshape2)\nrequire(data.table)\nrequire(ggplot2)\n#Overall check per country\nf16<-dcast(f15, CountryNm ~ f14) #Pivot table ExtractDate per country\n# dcast intersting URL: http://www.dummies.com/how-to/content/how-to-cast-data-to-wide-format-in-r.html\n\nf17<-substr(f15$GIIN, 14, 15)\nf18 <- cbind(f15, f17) # new column\ncolnames(f18)[2] <- \"GIINx\"\ncolnames(f18)[5] <- \"GIIN\"\n\n\nf19<-dcast(f18, CountryNm+GIIN ~ Extractdate, fun=sum)#YES!!!\nf20<-melt(f19)\ncolnames(f20)[3] <- \"Extractdate\"\ncolnames(f20)[4] <- \"Frequence\"\n\n#GIIN: creation of the graph \nf21<-dcast(f18, GIIN ~ Extractdate)\nf22<-melt(f21)\nsum(f22$value)#to check if we still have tha adequate number of recors)\ncolnames(f22)[2] <- \"Extractdate\"\ncolnames(f22)[3] <- \"Frequence\"\nf23<-ggplot(data=f22, aes(x=Extractdate, y=Frequence, fill=GIIN)) + geom_bar(stat=\"identity\")\nf23\n\n#Country: creation of the graph \nf24<-melt(f16)\nsum(f24$value)#to check if we still have tha adequate number of recors)\ncolnames(f24)[2] <- \"Extractdate\"\ncolnames(f24)[3] <- \"Frequence\"\n\nView(f24)\n\nf25<-f24[order(f24$Frequence,decreasing=TRUE), ]\n\nf26 <- subset(f25, f25$Frequence>=1000)\nf27<-ggplot(data=f26, aes(x=Extractdate, y=Frequence, fill=CountryNm)) + geom_bar(stat=\"identity\")\n\nf26 <- subset(f25, f25$Frequence>=1000)\nf27<-ggplot(data=f26, aes(x=Extractdate, y=Frequence, fill=CountryNm)) + geom_bar(stat=\"identity\")\n\nf26<-NULL\nmanipulate({        \n        f27<-ggplot(data=f26, aes(x=Extractdate, y=Frequence, fill=CountryNm)) + geom_bar(stat=\"identity\")\n        f27\n},\nf26$Frequence<-slider(0,10000, step=100, initial = 500))\n\n#Maniputale function########################\n#please ref: http://stackoverflow.com/questions/15905744/how-to-use-manipulate-on-ggplot-geom-smooth\n\nmanipulate({\n        #define plotting function \n        f26 <- subset(f25, f25$Frequence>=f29)\n        ggplot(data=f26, aes(x=Extractdate, y=Frequence, fill=CountryNm)) + geom_bar(stat=\"identity\")},\n        #define variable that will be changed in plot\n        f29=slider(0,10000, step=100, initial = 0)\n)\n\n\n\n#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\np1<-ggplot(f26, aes(x=CountryNm, y=Frequence, fill=Extractdate, label=\"\")) + \n        geom_bar(aes(stat=\"identity\",weight=CountryNm, fill=Extractdate)) + \n        geom_text(hjust = 0, size = 3) + \n        coord_flip() +\n        theme_minimal()\np1\n\n#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n#B-extract graph====================================================================\npng(\"graph.png\", width=480, height=480, units=\"px\")\ndev.off()\n#E-extract graph====================================================================\n\n#Define checks per GIIN\n#START############################NOT USED#################################################\n# 1. filter GIIN\nfxx<-str_match(fx$GIIN, \".*\\\\.SL.*\")[, 1]\n\nfxx$GIIN<-NULL\nfxx<-substr(f15$GIIN, 14, 15)\nfxx$GIIN1 = paste(f16) #new column : concatenate abbreviated GIIN\nfxx <- subset(f15 , GIIN1 = SL)\nfyy<-fx[order(fx$september,decreasing=TRUE), ]\nfyy <- subset(fx, fx$september>=1000)\n#END############################NOT USED#################################################\n\n#DATA REVIEW WORK============================================\n#check unique value in columns\na<-unique(unlist(f15$Extractdate, use.names = FALSE))\nb<-unique(unlist(f15$CountryNm, use.names = FALSE))\nView(b)\n",
    "created" : 1415133744555.000,
    "dirty" : true,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3005954296",
    "id" : "A0F1E899",
    "lastKnownWriteTime" : 1415534618,
    "path" : "C:/Users/cberthillon/997.FATCA/project1/FATCAchallenge.R",
    "project_path" : "FATCAchallenge.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}